/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface VenusComptrollerAbi extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): VenusComptrollerAbi;
  clone(): VenusComptrollerAbi;
  methods: {
    borrowGuardianPaused(arg0: string): NonPayableTransactionObject<boolean>;

    claimVenus(holder: string): NonPayableTransactionObject<void>;

    enterMarkets(vTokens: string[]): NonPayableTransactionObject<string[]>;

    getAccountLiquidity(account: string): NonPayableTransactionObject<{
      err: string;
      liquidity: string;
      shortfall: string;
      0: string;
      1: string;
      2: string;
    }>;

    getAssetsIn(account: string): NonPayableTransactionObject<string[]>;

    getXVSAddress(): NonPayableTransactionObject<string>;

    markets(vTokenAddress: string): NonPayableTransactionObject<{
      isListed: boolean;
      collateralFactorMantissa: string;
      isVenus: boolean;
      0: boolean;
      1: string;
      2: boolean;
    }>;

    mintGuardianPaused(arg0: string): NonPayableTransactionObject<boolean>;

    oracle(): NonPayableTransactionObject<string>;

    venusSpeeds(vToken: string): NonPayableTransactionObject<string>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
