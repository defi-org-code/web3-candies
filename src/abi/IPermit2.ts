/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BigNumber from "bignumber.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";
export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}
export type Approval = ContractEventLog<{
  owner: string;
  token: string;
  spender: string;
  amount: string;
  expiration: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type Lockdown = ContractEventLog<{
  owner: string;
  token: string;
  spender: string;
  0: string;
  1: string;
  2: string;
}>;
export type NonceInvalidation = ContractEventLog<{
  owner: string;
  token: string;
  spender: string;
  newNonce: string;
  oldNonce: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type Permit = ContractEventLog<{
  owner: string;
  token: string;
  spender: string;
  amount: string;
  expiration: string;
  nonce: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type UnorderedNonceInvalidation = ContractEventLog<{
  owner: string;
  word: string;
  mask: string;
  0: string;
  1: string;
  2: string;
}>;
export interface IPermit2 extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): IPermit2;
  clone(): IPermit2;
  methods: {
    DOMAIN_SEPARATOR(): NonPayableTransactionObject<string>;

    allowance(
      arg0: string,
      arg1: string,
      arg2: string
    ): NonPayableTransactionObject<{
      amount: string;
      expiration: string;
      nonce: string;
      0: string;
      1: string;
      2: string;
    }>;

    approve(
      token: string,
      spender: string,
      amount: number | string | BigNumber,
      expiration: number | string | BigNumber
    ): NonPayableTransactionObject<void>;

    invalidateNonces(
      token: string,
      spender: string,
      newNonce: number | string | BigNumber
    ): NonPayableTransactionObject<void>;

    invalidateUnorderedNonces(
      wordPos: number | string | BigNumber,
      mask: number | string | BigNumber
    ): NonPayableTransactionObject<void>;

    lockdown(approvals: [string, string][]): NonPayableTransactionObject<void>;

    nonceBitmap(
      arg0: string,
      arg1: number | string | BigNumber
    ): NonPayableTransactionObject<string>;

    "permit(address,((address,uint160,uint48,uint48)[],address,uint256),bytes)"(
      owner: string,
      permitBatch: [
        [
          string,
          number | string | BigNumber,
          number | string | BigNumber,
          number | string | BigNumber
        ][],
        string,
        number | string | BigNumber
      ],
      signature: string | number[]
    ): NonPayableTransactionObject<void>;

    "permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)"(
      owner: string,
      permitSingle: [
        [
          string,
          number | string | BigNumber,
          number | string | BigNumber,
          number | string | BigNumber
        ],
        string,
        number | string | BigNumber
      ],
      signature: string | number[]
    ): NonPayableTransactionObject<void>;

    "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)"(
      permit: [
        [string, number | string | BigNumber],
        number | string | BigNumber,
        number | string | BigNumber
      ],
      transferDetails: [string, number | string | BigNumber],
      owner: string,
      signature: string | number[]
    ): NonPayableTransactionObject<void>;

    "permitTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes)"(
      permit: [
        [string, number | string | BigNumber][],
        number | string | BigNumber,
        number | string | BigNumber
      ],
      transferDetails: [string, number | string | BigNumber][],
      owner: string,
      signature: string | number[]
    ): NonPayableTransactionObject<void>;

    "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)"(
      permit: [
        [string, number | string | BigNumber],
        number | string | BigNumber,
        number | string | BigNumber
      ],
      transferDetails: [string, number | string | BigNumber],
      owner: string,
      witness: string | number[],
      witnessTypeString: string,
      signature: string | number[]
    ): NonPayableTransactionObject<void>;

    "permitWitnessTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes32,string,bytes)"(
      permit: [
        [string, number | string | BigNumber][],
        number | string | BigNumber,
        number | string | BigNumber
      ],
      transferDetails: [string, number | string | BigNumber][],
      owner: string,
      witness: string | number[],
      witnessTypeString: string,
      signature: string | number[]
    ): NonPayableTransactionObject<void>;

    "transferFrom((address,address,uint160,address)[])"(
      transferDetails: [string, string, number | string | BigNumber, string][]
    ): NonPayableTransactionObject<void>;

    "transferFrom(address,address,uint160,address)"(
      from: string,
      to: string,
      amount: number | string | BigNumber,
      token: string
    ): NonPayableTransactionObject<void>;
  };
  events: {
    Approval(cb?: Callback<Approval>): EventEmitter;
    Approval(options?: EventOptions, cb?: Callback<Approval>): EventEmitter;

    Lockdown(cb?: Callback<Lockdown>): EventEmitter;
    Lockdown(options?: EventOptions, cb?: Callback<Lockdown>): EventEmitter;

    NonceInvalidation(cb?: Callback<NonceInvalidation>): EventEmitter;
    NonceInvalidation(
      options?: EventOptions,
      cb?: Callback<NonceInvalidation>
    ): EventEmitter;

    Permit(cb?: Callback<Permit>): EventEmitter;
    Permit(options?: EventOptions, cb?: Callback<Permit>): EventEmitter;

    UnorderedNonceInvalidation(
      cb?: Callback<UnorderedNonceInvalidation>
    ): EventEmitter;
    UnorderedNonceInvalidation(
      options?: EventOptions,
      cb?: Callback<UnorderedNonceInvalidation>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Approval", cb: Callback<Approval>): void;
  once(event: "Approval", options: EventOptions, cb: Callback<Approval>): void;

  once(event: "Lockdown", cb: Callback<Lockdown>): void;
  once(event: "Lockdown", options: EventOptions, cb: Callback<Lockdown>): void;

  once(event: "NonceInvalidation", cb: Callback<NonceInvalidation>): void;
  once(
    event: "NonceInvalidation",
    options: EventOptions,
    cb: Callback<NonceInvalidation>
  ): void;

  once(event: "Permit", cb: Callback<Permit>): void;
  once(event: "Permit", options: EventOptions, cb: Callback<Permit>): void;

  once(
    event: "UnorderedNonceInvalidation",
    cb: Callback<UnorderedNonceInvalidation>
  ): void;
  once(
    event: "UnorderedNonceInvalidation",
    options: EventOptions,
    cb: Callback<UnorderedNonceInvalidation>
  ): void;
}
